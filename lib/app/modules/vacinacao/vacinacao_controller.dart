import 'package:cuidar_pet_app/app/modules/vacinacao/services/vacinacao_service_interface.dart';
import 'package:cuidar_pet_app/app/modules/vacinacao/store/vacinacao_store.dart';
import 'package:cuidar_pet_app/app/modules/notificacoes/services/notificacoes_service.dart';
import 'package:cuidar_pet_app/app/modules/notificacoes/services/notificacoes_settings_service.dart';
import 'package:mobx/mobx.dart';
import 'package:uuid/uuid.dart';

part 'vacinacao_controller.g.dart';

class VacinacaoController = _VacinacaoControllerBase with _$VacinacaoController;

abstract class _VacinacaoControllerBase with Store {
  final IVacinacaoService _service;
  final NotificacoesService _notificacoesService = NotificacoesService();
  final NotificacoesSettingsService _settingsService = NotificacoesSettingsService();

  @observable
  VacinacaoStore vacinacao = VacinacaoStoreFactory.novo('');

  @observable
  ObservableList<VacinacaoStore> vacinacoes = ObservableList<VacinacaoStore>();

  @observable
  String? animalSelecionadoId;

  @observable
  String? animalSelecionadoNome;

  @observable
  bool isLoading = false;

  _VacinacaoControllerBase(this._service);

  // ‚úÖ Usar a valida√ß√£o do VacinacaoStore
  @computed
  bool get isFormValid => vacinacao.isFormValid;

  @action
  void setAnimalSelecionado(String animalId, String animalNome) {
    animalSelecionadoId = animalId;
    animalSelecionadoNome = animalNome;
    vacinacao = VacinacaoStoreFactory.novo(animalId);
    loadVacinacoesByAnimal(animalId);
  }

  @action
  Future<void> loadVacinacoesByAnimal(String animalId) async {
    try {
      isLoading = true;
      final list = await _service.getByAnimalId(animalId);
      vacinacoes.clear();

      for (var vacinacao in list) {
        vacinacoes.add(VacinacaoStoreFactory.fromModel(vacinacao));
      }
    } finally {
      isLoading = false;
    }
  }

  // ‚úÖ M√©todo principal para salvar vacina√ß√£o (com ou sem imagem)
  @action
  Future<void> salvarVacinacao() async {
    if (animalSelecionadoId == null || !isFormValid) {
      print('‚ùå N√£o √© poss√≠vel salvar: animalId=${animalSelecionadoId}, isValid=${isFormValid}');
      return;
    }

    try {
      // Gerar ID se n√£o existir
      if (vacinacao.id.isEmpty) {
        vacinacao.id = const Uuid().v4();
      }

      vacinacao.animalId = animalSelecionadoId!;

      print('üíæ Salvando vacina√ß√£o:');
      print('  - ID: ${vacinacao.id}');
      print('  - T√≠tulo: ${vacinacao.titulo}');
      print('  - Descri√ß√£o: ${vacinacao.descricao}');
      print('  - Data: ${vacinacao.dataVacinacao}');
      print('  - Imagem: ${vacinacao.imagem ?? "SEM IMAGEM"}');
      print('  - Conclu√≠da: ${vacinacao.concluida}');

      // ‚úÖ Salvar sempre usando o m√©todo b√°sico (funciona com ou sem imagem)
      await _service.saveOrUpdate(vacinacao.toModel());

      // Agendar notifica√ß√£o se estiver habilitada
      await _scheduleNotificacaoIfEnabled(vacinacao);

      await loadVacinacoesByAnimal(animalSelecionadoId!);
      resetForm();

      print('‚úÖ Vacina√ß√£o salva com sucesso!');
    } catch (e) {
      print('‚ùå Erro ao salvar vacina√ß√£o: $e');
      rethrow;
    }
  }

  // ‚úÖ M√©todo simplificado para criar vacina√ß√£o (mant√©m compatibilidade)
  @action
  Future<void> criarVacinacao(String titulo, String descricao, String data, String? imagem) async {
    if (animalSelecionadoId == null) return;

    // Atualizar a vacina√ß√£o atual
    vacinacao.setTitulo(titulo);
    vacinacao.setDescricao(descricao);
    vacinacao.setDataVacinacao(data);
    vacinacao.setImagem(imagem);

    // Salvar usando o m√©todo principal
    await salvarVacinacao();
  }

  // ‚úÖ M√©todo para criar vacina√ß√£o com imagem (mant√©m compatibilidade)
  @action
  Future<void> criarVacinacaoComImagem(String titulo, String descricao, String data, String imagePath) async {
    if (animalSelecionadoId == null) return;

    try {
      final novaVacinacao = VacinacaoStoreFactory.novo(animalSelecionadoId!);
      novaVacinacao.id = const Uuid().v4();
      novaVacinacao.setTitulo(titulo);
      novaVacinacao.setDescricao(descricao);
      novaVacinacao.setDataVacinacao(data);

      print('üíâ Criando vacina√ß√£o com imagem...');
      print('üêæ Animal: $animalSelecionadoNome');

      await _service.saveOrUpdateWithImage(novaVacinacao.toModel(), imagePath);

      // Agendar notifica√ß√£o se estiver habilitada
      await _scheduleNotificacaoIfEnabled(novaVacinacao);

      await loadVacinacoesByAnimal(animalSelecionadoId!);
    } catch (e) {
      print('‚ùå Erro ao criar vacina√ß√£o com imagem: $e');
      rethrow;
    }
  }

  // ‚úÖ Marcar vacina√ß√£o como conclu√≠da (funcionalidade espec√≠fica)
  @action
  Future<void> marcarComoConcluida(VacinacaoStore vacinacaoStore, bool concluida) async {
    try {
      vacinacaoStore.setConcluida(concluida);
      await _service.saveOrUpdate(vacinacaoStore.toModel());

      if (animalSelecionadoId != null) {
        await loadVacinacoesByAnimal(animalSelecionadoId!);
      }

      print('‚úÖ Vacina√ß√£o ${concluida ? "marcada como conclu√≠da" : "desmarcada"}');
    } catch (e) {
      print('‚ùå Erro ao marcar vacina√ß√£o: $e');
      rethrow;
    }
  }

  @action
  Future<void> excluirVacinacao(VacinacaoStore vacinacaoParaExcluir) async {
    await _notificacoesService.cancelVacinacaoNotification(vacinacaoParaExcluir.id);
    await _service.delete(vacinacaoParaExcluir.toModel());
    if (animalSelecionadoId != null) {
      await loadVacinacoesByAnimal(animalSelecionadoId!);
    }
  }

  @action
  void resetForm() {
    if (animalSelecionadoId != null) {
      vacinacao = VacinacaoStoreFactory.novo(animalSelecionadoId!);
    }
  }

  Future<void> _scheduleNotificacaoIfEnabled(VacinacaoStore vacinacao) async {
    final isEnabled = await _settingsService.isVacinacaoEnabled();
    if (!isEnabled) {
      print('üîï Notifica√ß√µes de vacina√ß√£o desabilitadas');
      return;
    }

    final animalNome = animalSelecionadoNome ?? 'Pet';

    print('üíâ Agendando notifica√ß√£o de vacina√ß√£o...');
    print('üêæ Animal: $animalNome');

    await _notificacoesService.scheduleVacinacaoNotification(
      vacinacaoId: vacinacao.id,
      titulo: vacinacao.titulo,
      descricao: vacinacao.descricao,
      dataVacinacao: vacinacao.dataVacinacao,
      animalNome: animalNome,
      animalId: vacinacao.animalId,
    );
  }
}
